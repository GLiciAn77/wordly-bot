import os
import logging
import random
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv(".env")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è
with open("five_letter_words.txt", encoding="utf-8") as f:
    WORDS = set(line.strip().lower() for line in f if len(line.strip()) == 5)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}
feedback_state = {}

# –¢–µ–∫—Å—Ç—ã
START_TEXT = """
üëã –ü—Ä–∏–≤–µ—Ç!

–Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–≥—Ä—ã –≤ ¬´5 –±—É–∫–≤¬ª –∏ –ª—é–±—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤ Wordly –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

üìù –ß—Ç–æ —è —É–º–µ—é?
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ:
‚Ä¢ –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–∞–º—ã–µ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞,
‚Ä¢ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ç–≤–æ–µ–π –ø–æ–ø—ã—Ç–∫–∏ ‚Äî —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫,
‚Ä¢ –∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞.

üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?
1Ô∏è‚É£ –ù–∞–∂–º–∏ üéØ ¬´–ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª, —è –ø—Ä–µ–¥–ª–æ–∂—É —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.
2Ô∏è‚É£ –ü–æ—Å–ª–µ —Å–≤–æ–µ–π –ø–æ–ø—ã—Ç–∫–∏ –≤ –∏–≥—Ä–µ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ:
   `0` ‚Äî –±—É–∫–≤—ã –Ω–µ—Ç ‚¨ú
   `1` ‚Äî –±—É–∫–≤–∞ –Ω–∞ –º–µ—Å—Ç–µ üü©
   `2` ‚Äî –±—É–∫–≤–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ –º–µ—Å—Ç–µ üü®
–ù–∞–ø—Ä–∏–º–µ—Ä: `01210`.

üëá –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:
"""

HELP_TEXT = """
‚ÑπÔ∏è –ü–æ–º–æ—â—å

–Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–≥—Ä—ã –≤ ¬´5 –±—É–∫–≤¬ª –∏ –¥—Ä—É–≥–∏—Ö –∞–Ω–∞–ª–æ–≥–æ–≤ Wordly –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üéØ *–ù–∞—á–∞—Ç—å –∏–≥—Ä—É*
‚Äî –ü—Ä–µ–¥–ª–æ–∂—É —Å–∞–º—ã–µ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞. 
‚Äî –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—ë.

üî¢ *–í–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç*
‚Äî –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–ª–æ–≤–æ –≤ –∏–≥—Ä–µ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
  ‚Ä¢ `0` ‚Äî –±—É–∫–≤—ã –Ω–µ—Ç ‚¨ú
  ‚Ä¢ `1` ‚Äî –±—É–∫–≤–∞ –Ω–∞ –º–µ—Å—Ç–µ üü©
  ‚Ä¢ `2` ‚Äî –±—É–∫–≤–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ –º–µ—Å—Ç–µ üü®
–ü—Ä–∏–º–µ—Ä: `02110`.

üìù *–ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤*
‚Äî –ü–æ–∫–∞–∂—É –≤—Å–µ —Ç–≤–æ–∏ –ø—Ä–æ—à–ª—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ –≤–∏–¥–µ —Ü–≤–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫.

‚úÖ *–°–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ*
‚Äî –ü–æ–∑–¥—Ä–∞–≤–ª—é –∏ –ø—Ä–µ–¥–ª–æ–∂—É –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–≤–æ–¥–æ–≤.

üîô *–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥*
‚Äî –£–±–µ—Ä—É –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–ø—ã—Ç–∫—É, –µ—Å–ª–∏ –æ—à–∏–±—Å—è.

‚ôªÔ∏è *–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ*
‚Äî –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à—É —Ç–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –∏ –ø—Ä–µ–¥–ª–æ–∂—É –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.

‚úâÔ∏è *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*
‚Äî –•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤? –ù–∞–ø–∏—à–∏ /feedback. –°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º –æ—Ü–µ–Ω–∫—É –æ—Ç 1 üí© –¥–æ 5 üöÄ.
"""

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_message(update, text, reply_markup=None, parse_mode=None):
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    elif update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help"),
         InlineKeyboardButton("‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é
def game_menu():
    keyboard = [
        [InlineKeyboardButton("üîô –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥", callback_data="undo"),
         InlineKeyboardButton("‚ôªÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")],
        [InlineKeyboardButton("‚úÖ –°–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ", callback_data="guessed")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help"),
         InlineKeyboardButton("‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"DEBUG: start update = {update}")
    user_sessions[update.effective_user.id] = {
        "history": [],
        "possible_words": list(WORDS)
    }
    await send_message(update, START_TEXT, reply_markup=main_menu())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"DEBUG: help update = {update}")
    await send_message(update, HELP_TEXT, reply_markup=main_menu(), parse_mode="Markdown")

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"DEBUG: feedback_start update = {update}")
    feedback_state[update.effective_user.id] = {"step": "await_text"}
    await send_message(update, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç.")

async def feedback_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: feedback_message update = {update}")
    if feedback_state.get(user_id, {}).get("step") == "await_text":
        feedback_state[user_id]["text"] = update.message.text
        feedback_state[user_id]["step"] = "await_rating"
        keyboard = [
            [InlineKeyboardButton("1 üí©", callback_data="rating_1"),
             InlineKeyboardButton("2 üòï", callback_data="rating_2"),
             InlineKeyboardButton("3 üôÇ", callback_data="rating_3"),
             InlineKeyboardButton("4 üëç", callback_data="rating_4"),
             InlineKeyboardButton("5 üöÄ", callback_data="rating_5")]
        ]
        await send_message(update, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏ –º–µ–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"DEBUG: handle_rating update = {update}")
    await query.answer()
    rating = query.data.split("_")[1]
    user_id = query.from_user.id
    feedback_text = feedback_state.get(user_id, {}).get("text", "")
    with open("feedback_log.txt", "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now()}] FEEDBACK: {feedback_text}\nRATING: {rating}\n\n")
    await query.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ –∏ –æ—Ü–µ–Ω–∫—É! üöÄ")
    feedback_state.pop(user_id, None)

# –ö–Ω–æ–ø–∫–∏
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"DEBUG: handle_buttons update = {update}")
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "start_game":
        user_sessions[user_id] = {"history": [], "possible_words": list(WORDS)}
        top_words = random.sample(user_sessions[user_id]["possible_words"], 5)
        buttons = [[InlineKeyboardButton(w.upper(), callback_data=f"word_{w}")] for w in top_words]
        await send_message(update, "üéØ –í—ã–±–µ—Ä–∏ —Å–ª–æ–≤–æ –¥–ª—è —Ö–æ–¥–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë:", 
                           reply_markup=InlineKeyboardMarkup(buttons + list(game_menu().inline_keyboard)))

    elif data.startswith("word_"):
        word = data[5:]
        await process_word_choice(update, context, user_id, word)

    elif data == "undo":
        if user_sessions[user_id]["history"]:
            user_sessions[user_id]["history"].pop()
            await send_message(update, "–£–¥–∞–ª–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥.", reply_markup=game_menu())
        else:
            await send_message(update, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è.", reply_markup=game_menu())

    elif data == "restart":
        await start(update, context)

    elif data == "guessed":
        await query.edit_message_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ!\n\n–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?",
            reply_markup=main_menu()
        )
        user_sessions[user_id] = {
            "history": [],
            "possible_words": list(WORDS)
        }

    elif data == "help":
        await send_message(update, HELP_TEXT, parse_mode="Markdown", reply_markup=main_menu())

    elif data == "feedback":
        await feedback_start(update, context)

# –°–ª–æ–≤–∞
async def process_word_choice(update, context, user_id, word):
    print(f"DEBUG: process_word_choice word = {word}")
    if word not in WORDS:
        keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ", callback_data=f"confirm_{word}"),
                     InlineKeyboardButton("‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="start_game")]]
        await send_message(update,
            f"‚ö†Ô∏è –°–ª–æ–≤–æ {word.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ. –≠—Ç–æ —Ç–æ—á–Ω–æ —Ç–æ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –≤–≤—ë–ª –≤ –∏–≥—Ä–µ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        session = user_sessions[user_id]
        session["history"].append({"word": word, "pattern": None})
        await send_message(update,
            f"–ü—Ä–∏–Ω—è—Ç–æ —Å–ª–æ–≤–æ {word.upper()}.\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞ 02120, –≥–¥–µ:\n"
            "0 ‚Äî –±—É–∫–≤—ã –Ω–µ—Ç ‚¨ú\n"
            "1 ‚Äî –±—É–∫–≤–∞ –Ω–∞ –º–µ—Å—Ç–µ üü©\n"
            "2 ‚Äî –±—É–∫–≤–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ –º–µ—Å—Ç–µ üü®",
            reply_markup=game_menu()
        )

# –¢–µ–∫—Å—Ç—ã
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"DEBUG: handle_message update = {update}")
    user_id = update.effective_user.id

    if feedback_state.get(user_id, {}).get("step") == "await_text":
        await feedback_message(update, context)
        return

    text = update.message.text.strip().lower()
    if len(text) == 5 and text.isalpha():
        await process_word_choice(update, context, user_id, text)
    elif set(text).issubset({"0", "1", "2"}) and len(text) == 5:
        await process_pattern(update, context, user_id, text)
    else:
        await send_message(update, "–Ø –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ (5 –±—É–∫–≤) –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞ 02120.")

# 02120
async def process_pattern(update, context, user_id, pattern):
    session = user_sessions.setdefault(user_id, {"history": [], "possible_words": list(WORDS)})
    if not session["history"]:
        await send_message(update, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ.")
        return

    last = session["history"][-1]
    last["pattern"] = pattern
    session["possible_words"] = filter_words(session["possible_words"], last["word"], pattern)
    history_text = "\n".join(format_history(h["word"], h["pattern"]) for h in session["history"])
    remaining_count = len(session["possible_words"])

    if remaining_count > 0:
        top_words = random.sample(session["possible_words"], min(5, remaining_count))
        buttons = [[InlineKeyboardButton(w.upper(), callback_data=f"word_{w}")] for w in top_words]
        reply_markup = InlineKeyboardMarkup(buttons + list(game_menu().inline_keyboard))
    else:
        reply_markup = game_menu()

    await send_message(update,
        f"–í–æ—Ç —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è:\n{history_text}\n\n–û—Å—Ç–∞–ª–æ—Å—å {remaining_count} —Å–ª–æ–≤.",
        reply_markup=reply_markup
    )

def format_history(word, pattern):
    if not pattern:
        return word.upper()
    colors = {"0":"‚¨ú", "1":"üü©", "2":"üü®"}
    return "".join(colors[c] for c in pattern) + f" = {word.upper()}"

def filter_words(words, last_word, pattern):
    return [w for w in words if is_match(w, last_word, pattern)]

from collections import Counter

def is_match(word, target, pattern):
    word_counter = Counter(word)
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    for i, (w_c, t_c, p) in enumerate(zip(word, target, pattern)):
        if p == "1":
            if w_c != t_c:
                return False
            word_counter[t_c] -= 1
    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Å–ª–æ–≤–µ (2)
    for i, (w_c, t_c, p) in enumerate(zip(word, target, pattern)):
        if p == "2":
            if w_c == t_c:
                return False
            if word_counter[t_c] <= 0:
                return False
            word_counter[t_c] -= 1
    # –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ (0)
    for i, (w_c, t_c, p) in enumerate(zip(word, target, pattern)):
        if p == "0":
            if word_counter[t_c] > 0:
                return False
    return True

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("feedback", feedback_start))
    app.add_handler(CallbackQueryHandler(handle_buttons, pattern="^(?!rating_).*"))
    app.add_handler(CallbackQueryHandler(handle_rating, pattern=r'^rating_\d'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
