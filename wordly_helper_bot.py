from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from collections import Counter
import os
import re
import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è
current_dir = os.path.dirname(os.path.abspath(__file__))
file_path = os.path.join(current_dir, "five_letter_words.txt")

with open(file_path, encoding="utf-8") as f:
    ALL_WORDS = [line.strip().lower() for line in f if len(line.strip()) == 5]

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
sessions = {}

def calculate_letter_frequencies(words):
    counter = Counter()
    for word in words:
        counter.update(set(word))
    return counter

def best_start_words(words, top_n=5):
    letter_freq = calculate_letter_frequencies(words)
    scores = []
    for word in words:
        unique_letters = set(word)
        score = sum(letter_freq[c] for c in unique_letters)
        scores.append((score, word))
    scores.sort(reverse=True)
    return [w for s, w in scores[:top_n]]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await help_command(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        "/newgame ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏.\n"
        "/stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ.\n"
        "/help ‚Äî –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É.\n"
        "/feedback <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n\n"
        "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏—Å—ã–ª–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "‚¨úüü©üü® –∏–ª–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä 01210.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—ë."
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üìä –°–µ–π—á–∞—Å –≤ —Å–ª–æ–≤–∞—Ä–µ {len(ALL_WORDS)} —Å–ª–æ–≤ –∏–∑ 5 –±—É–∫–≤.")

async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ' '.join(context.args)
    if not text:
        await update.message.reply_text("‚úç –ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ /feedback —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
        return
    with open("feedback_log.txt", "a", encoding="utf-8") as fout:
        fout.write(f"[{datetime.datetime.now()}] FEEDBACK: {text}\n")
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def newgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    sessions[user_id] = {
        "possible_words": ALL_WORDS.copy(),
        "awaiting_unknown_confirm": None
    }
    best_words = best_start_words(sessions[user_id]["possible_words"])
    keyboard = [[w] for w in best_words]
    keyboard.append(["–°–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ!"])
    await update.message.reply_text(
        "üéØ –ù–æ–≤–∞—è –∏–≥—Ä–∞!\n–í—ã–±–µ—Ä–∏ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

async def handle_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    word = update.message.text.strip().lower()

    if user_id not in sessions:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Å /newgame.")
        return

    if word == "—Å–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ!":
        await update.message.reply_text(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –°–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ!\n–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë? –ù–∞–ø–∏—à–∏ /newgame.",
            reply_markup=ReplyKeyboardRemove()
        )
        sessions.pop(user_id, None)
        return

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if sessions[user_id].get("awaiting_unknown_confirm"):
        if word == "‚úÖ –≤—Å—ë –≤–µ—Ä–Ω–æ":
            unknown_word = sessions[user_id]["awaiting_unknown_confirm"]
            with open("feedback_log.txt", "a", encoding="utf-8") as fout:
                fout.write(f"[{datetime.datetime.now()}] USER confirmed unknown word '{unknown_word}' as valid.\n")
            await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–ª –≤ –∂—É—Ä–Ω–∞–ª –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
            sessions[user_id]["awaiting_unknown_confirm"] = None
        elif word == "üîÑ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ":
            sessions[user_id]["awaiting_unknown_confirm"] = None
            await update.message.reply_text("‚úç –ù–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ:")
            return
        else:
            await update.message.reply_text("üòï –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –∏–ª–∏ üîÑ.")
            return

    # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö
    if word not in sessions[user_id]["possible_words"]:
        sessions[user_id]["awaiting_unknown_confirm"] = word
        keyboard = [["‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ"], ["üîÑ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ"]]
        await update.message.reply_text(
            f"ü§î –Ø –Ω–µ –Ω–∞—à—ë–ª —Å–ª–æ–≤–∞ ¬´{word}¬ª –≤ —Å–≤–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ. –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return

    sessions[user_id]["last_word"] = word
    await update.message.reply_text(
        f"‚úç –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ª–æ–≤–∞ *{word}* –≤ —Ñ–æ—Ä–º–∞—Ç–µ `01210` –∏–ª–∏ ‚¨úüü©üü®.",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in sessions or "last_word" not in sessions[user_id]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–ª–æ–≤–æ.")
        return

    feedback = update.message.text.strip()
    if re.match(r"^[012]{5}$", feedback):
        feedback_list = [int(c) for c in feedback]
    else:
        emoji_to_digit = {"‚¨ú":0, "üü©":1, "üü®":2}
        feedback_list = [emoji_to_digit.get(c, -1) for c in feedback]
        if -1 in feedback_list or len(feedback_list) != 5:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π `01210` –∏–ª–∏ ‚¨úüü©üü®.")
            return

    if all(fb == 1 for fb in feedback_list):
        await update.message.reply_text(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –°–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ!\n–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë? –ù–∞–ø–∏—à–∏ /newgame.",
            reply_markup=ReplyKeyboardRemove()
        )
        sessions.pop(user_id, None)
        return

    tried_word = sessions[user_id]["last_word"]
    new_possible = []
    for word in sessions[user_id]["possible_words"]:
        match = True
        for i, (ch, fb) in enumerate(zip(tried_word, feedback_list)):
            if fb == 1:
                if word[i] != ch:
                    match = False
                    break
            elif fb == 2:
                if ch not in word or word[i] == ch:
                    match = False
                    break
            elif fb == 0:
                count_in_feedback = sum(1 for k, f in enumerate(feedback_list) if tried_word[k] == ch and f in (1,2))
                if word.count(ch) > count_in_feedback:
                    match = False
                    break
        if match:
            new_possible.append(word)

    sessions[user_id]["possible_words"] = new_possible

    if not new_possible:
        await update.message.reply_text("üòï –ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –≤–æ –≤–≤–æ–¥–µ.")
    else:
        best_words = best_start_words(new_possible)
        keyboard = [[w] for w in best_words]
        keyboard.append(["–°–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ!"])
        await update.message.reply_text(
            f"üîé –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(new_possible)} —Å–ª–æ–≤.\n"
            "–í—ã–±–µ—Ä–∏ —Å–ª–æ–≤–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§î –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "/newgame ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "/feedback <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤."
    )

def main():
    app = ApplicationBuilder().token("7708015298:AAGFBGvQvEgPFJmfJ43AAPj99k9tWbwP09k").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command)) #–¥–æ–±–∞–≤–∏–ª –ø–æ–º–æ—â—å
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("feedback", feedback)) #–¥–æ–±–∞–≤–∏–ª —Ñ–∏–¥–±–µ–∫
    app.add_handler(CommandHandler("newgame", newgame))
    app.add_handler(MessageHandler(filters.Regex(r"^[012‚¨úüü©üü®]{5}$"), handle_feedback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_word))
    app.add_handler(MessageHandler(filters.ALL, unknown))
    app.run_polling()

if __name__ == "__main__":
    main()